Script started on 2020-02-14 11:04:44-0500
]0;chenal14@b2210-22:/h/u5/c8/04/chenal14/Documents/CSC209/chenal14/lab6b2210-22:~/Documents/CSC209/chenal14/lab6$ exitgdb overflow[8Pexitgdb overflow[8Pexit[Kexitgdb overflow
GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) list 36
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
34	
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) break 36[K3
Breakpoint 1 at 0x94f: file overflow.c, line 33.
(gdb) break 33[K6
Breakpoint 2 at 0x959: file overflow.c, line 36.
(gdb) run
Starting program: /h/u5/c8/04/chenal14/Documents/CSC209/chenal14/lab6/overflow 
Address of the variables:
7fffffffe690 -> &after[0]
7fffffffe694 -> &after[1]
7fffffffe698 -> &after[2]
7fffffffe69c -> &after[3]
7fffffffe680 -> &a[0]
7fffffffe684 -> &a[1]
7fffffffe688 -> &a[2]
7fffffffe68c -> &a[3]
7fffffffe670 -> &before[0]
7fffffffe674 -> &before[1]
7fffffffe678 -> &before[2]
7fffffffe67c -> &before[3]
7fffffffe66c -> &i
7fffffffe668 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}

Breakpoint 1, main () at overflow.c:33
33	    printf("\n");
(gdb) continue
Continuing.


Breakpoint 2, main () at overflow.c:36
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) continue[C[C[C[C[C[C[Knext
37	        a[i] = i * 10;
(gdb) next[Kdisplay after[0][K[K[K
1: after = {10, 10, 10, 10}
(gdb) display after[C[C[C[C[C[Cnext[K
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) next
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) next
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) next
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) next
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {10, 10, 10, 10}
(gdb) 
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
1: after = {10, 10, 10, 10}
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
1: after = {10, 10, 10, 10}
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
1: after = {10, 10, 10, 10}
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
1: after = {10, 10, 10, 10}
(gdb) 
37	        a[i] = i * 10;
1: after = {10, 10, 10, 10}
(gdb) 
38	        printf("i = %d\n", i);
1: after = {40, 10, 10, 10}
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe690
(gdb) print &(after[0])[1P])4])[1P[4])[1P[4])[1P[4])[1P[4])[C[1P(a[4])&(a[4])[C[C[C[C[C[C[C[C[C[C
$2 = (int *) 0x7fffffffe690
(gdb) quit[K[K[K[Kquit
A debugging session is active.

	Inferior 1 [process 21824] will be killed.

Quit anyway? (y or n) y
]0;chenal14@b2210-22:/h/u5/c8/04/chenal14/Documents/CSC209/chenal14/lab6b2210-22:~/Documents/CSC209/chenal14/lab6$ exit
exit

Script done on 2020-02-14 11:08:47-0500
